from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from flask import Flask, request
import asyncio
import os

TOKEN = os.environ.get("7847656840:AAEoG9zSN9gCmJ25VHzmzqOXtlO7aV14_TI")
ADMIN_ID = 486443841
APP_URL = os.environ.get("APP_URL")

user_data = {}
app = Flask(__name__)
telegram_app = ApplicationBuilder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É", "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É"], ["üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç iPhone üì±", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    uid = update.effective_user.id

    if text == "üì≤ –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å iPhone:")
        user_data[uid] = {"step": "model"}
    elif text == "üìç –õ–æ–∫–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É":
        await update.message.reply_text("–ù–∞—à–∞ –∞–¥—Ä–µ—Å–∞: üìç –º. –õ—å–≤—ñ–≤, –≤—É–ª. –ß—É–ø—Ä–∏–Ω–∫–∏ 1")
    elif text == "üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ –º–∞–π—Å—Ç—Ä–æ–º":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–º —É Telegram: @Enforcer1")
    else:
        if uid in user_data:
            step = user_data[uid]["step"]
            if step == "model":
                user_data[uid]["model"] = text
                user_data[uid]["step"] = "problem"
                await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∑ iPhone:")
            elif step == "problem":
                user_data[uid]["problem"] = text
                user_data[uid]["step"] = "phone"
                await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
            elif step == "phone":
                user_data[uid]["phone"] = text
                data = user_data[uid]
                message = (
                    f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{update.effective_user.username or '–±–µ–∑ username'}\n\n"
                    f"üì± –ú–æ–¥–µ–ª—å: {data['model']}\n"
                    f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['problem']}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}")
                await context.bot.send_message(chat_id=ADMIN_ID, text=message)
                await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –ú–∞–π—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ —Ç–æ–±–æ—é.")
                del user_data[uid]

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    asyncio.run(telegram_app.process_update(update))
    return "ok"

@app.route("/")
def set_webhook():
    telegram_app.bot.set_webhook(url=f"{APP_URL}/webhook/{TOKEN}")
    return "Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
